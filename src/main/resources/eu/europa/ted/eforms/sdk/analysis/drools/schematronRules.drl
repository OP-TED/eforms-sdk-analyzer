package eu.europa.ted.eforms.sdk.analysis.drools;

unit SdkUnit;

rule "Every assert has an id"
when
  /schematrons[ $sch: this ]/asserts[ id == null ]
then
  results.add(new ValidationResult($sch, "Schematron has an assert without an id", ValidationStatusEnum.ERROR));
end

rule "Every assert id is unique in the schematron file"
when
  $duplicates : /schematrons[ $sch: this ]/duplicateAssertIds
then
  results.add(new ValidationResult($sch, "Schematron contains duplicate assert ids: " + $duplicates, ValidationStatusEnum.ERROR));
end

rule "All expected phases are present"
when
  /schematrons[ $sch: this, $schId: id ];
  /noticeTypes[ $expected: id ]
  not (exists /schematrons[ id == $schId ]/phases[ id == "eforms-" + $expected ])
then
  results.add(new ValidationResult($sch, "Schematron is missing phase for: " + $expected, ValidationStatusEnum.ERROR));
end

rule "Every pattern is part of at least one phase"
when
  /schematrons[ $sch: this, $schId: id ]/patterns[ $patternId: id ]
  not (exists /schematrons[ id == $schId ]/phases[ activePatterns contains $patternId ])
then
  results.add(new ValidationResult($sch, "Schematron has pattern that is not part of any phase: " + $patternId, ValidationStatusEnum.ERROR));
end

rule "Every assert diagnostics is defined in the schematron file"
when
  /schematrons[ $sch: this, $schId: id ]/asserts[ $diagnosticId: diagnostics, diagnostics != null ]
  not (exists /schematrons[ id == $schId ]/diagnostics[ id == $diagnosticId ])
then
  results.add(new ValidationResult($sch, "Schematron is missing diagnostic definitions for: " + $diagnosticId, ValidationStatusEnum.ERROR));
end

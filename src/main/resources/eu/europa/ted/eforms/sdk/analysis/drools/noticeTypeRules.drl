package eu.europa.ted.eforms.sdk.analysis.drools;

unit SdkUnit;

import eu.europa.ted.eforms.sdk.domain.noticetype.DocumentType;
import eu.europa.ted.eforms.sdk.domain.noticetype.NoticeSubTypeForIndex;
import eu.europa.ted.eforms.sdk.analysis.vo.ValidationResult;
import eu.europa.ted.eforms.sdk.analysis.enums.ValidationStatusEnum;
import java.nio.file.Files;

// TEDEFO-1813: Check the sdkVersion in the header of every file in the folder.
rule "Every notice type has SDK version"
when
  /noticeTypes[ $nt: this, sdkVersion == null || sdkVersion.trim.empty ]
then
  results.add(new ValidationResult($nt, "Undefined SDK version", ValidationStatusEnum.ERROR));
end

// TEDEFO-1813: Check the sdkVersion in the header of every file in the folder.
rule "Notice types index has SDK version"
when
  /noticeTypesIndex[ $nti: this, sdkVersion == null || sdkVersion.trim.empty ]
then
  results.add(new ValidationResult($nti, "Undefined SDK version", ValidationStatusEnum.ERROR));
end

// TEDEFO-1815: Check that the labels referenced in the notice-types.json file actually exist.
rule "Notice types index references existing labels"
when
  /noticeTypesIndex[ $nti: this ]
  $labelId: String() from $nti.labelIds
  not (exists /labels[ id == $labelId ])
then
  results.add(new ValidationResult($nti, "Referenced label " + $labelId + " does not exist", ValidationStatusEnum.ERROR));
end

// TEDEFO-1816: Check that the view templates referenced in the notice-types.json file actually exist.
rule "Notice types index references existing view templates"
when
  /noticeTypesIndex[ $nti: this ]
  $viewTemplateId: String() from $nti.viewTemplateIds
  not (exists /viewTemplates[ id == $viewTemplateId ])
then
  results.add(new ValidationResult($nti, "Referenced view template " + $viewTemplateId + " does not exist", ValidationStatusEnum.ERROR));
end

// TEDEFO-1817: Check that the documentType of every noticeSubType exists in the documentTypes section (at the end of the notice-types.json).
rule "Notice sub types reference existing document types"
when
  /noticeTypesIndex[ $nti: this ]
  NoticeSubTypeForIndex( $documentTypeId: documentType ) from $nti.getNoticeSubTypes
  not (exists /documentTypes[ id == $documentTypeId ])
then
  results.add(new ValidationResult($nti, "Referenced document type " + $documentTypeId + " does not exist", ValidationStatusEnum.ERROR));
end

// TEDEFO-1818: For every documentType check that the schemaLocation exists in the SDK.
rule "Document types use existing schemaLocation"
when
  /documentTypes[ $dt: this, $schemaLocation: schemaLocation, !schemaLocationExists(sdkRoot) ]
then
  results.add(new ValidationResult($dt, "Referenced document type " + $schemaLocation + " does not exist", ValidationStatusEnum.ERROR));
end
